{
  "title": "Qdrant-integration",
  "type": "object",
  "schemaVersion": 1,
  "properties": {
    "qdrantUrl": {
      "title": "Qdrant URL",
      "type": "string",
      "description": "REST URL of the Qdrant instance to connect to",
      "editor": "textfield",
      "sectionCaption": "Qdrant settings"
    },
    "qdrantApiKey": {
      "title": "Qdrant API KEY",
      "description": "Qdrant API KEY",
      "type": "string",
      "editor": "textfield",
      "isSecret": true
    },
    "qdrantCollectionName": {
      "title": "Qdrant Collection Name",
      "type": "string",
      "description": "Name of the Qdrant collection where the data will be stored",
      "editor": "textfield"
    },
    "qdrantAutoCreateCollection": {
      "title": "Whether to automatically create the collection.",
      "type": "boolean",
      "description": "When set to true, the integration will automatically create the collection in Qdrant if it does not exist with the appropriate vector dimensions.",
      "default": true
    },
    "embeddingsProvider": {
      "title": "Embeddings provider (as defined in the langchain API)",
      "description": "Choose the embeddings provider to use for generating embeddings OpenAI, Cohere, or Fake",
      "type": "string",
      "editor": "select",
      "enum": [
        "OpenAI",
        "Cohere",
        "Fake"
      ],
      "default": "OpenAI",
      "sectionCaption": "Embeddings settings"
    },
    "embeddingsConfig": {
      "title": "Configuration for embeddings provider",
      "description": "Configure the parameters for the LangChain embedding class. Key points to consider:\n\n1. Typically, you only need to specify the model name. For example, for OpenAI, set the model name as {\"model\": \"text-embedding-3-small\"}.\n\n2. It's required to ensure that the vector size of your embeddings matches the size of embeddings in the database.\n\n3. Here are examples of embedding models:\n   - [OpenAI](https://platform.openai.com/docs/guides/embeddings): `text-embedding-3-small`, `text-embedding-3-large`, etc.\n   - [Cohere](https://docs.cohere.com/docs/cohere-embed): `embed-english-v3.0`, `embed-multilingual-light-v3.0`, etc.\n\n4. For more details about other parameters, refer to the [LangChain documentation](https://python.langchain.com/docs/integrations/text_embedding/).",
      "type": "object",
      "editor": "json"
    },
    "embeddingsApiKey": {
      "title": "Embeddings API KEY (whenever applicable, depends on provider)",
      "description": "Value of the API KEY for the embeddings provider (if required).\n\n For example for OpenAI it is OPENAI_API_KEY, for Cohere it is COHERE_API_KEY)",
      "type": "string",
      "editor": "textfield",
      "isSecret": true
    },
    "datasetFields": {
      "title": "Dataset fields to select from the dataset results and store in the database",
      "type": "array",
      "description": "This array specifies the dataset fields to be selected and stored in the vector store. Only the fields listed here will be included in the vector store.\n\nFor instance, when using the Website Content Crawler, you might choose to include fields such as `text`, `url`, and `metadata.title` in the vector store.",
      "default": [
        "text"
      ],
      "prefill": [
        "text"
      ],
      "editor": "stringList",
      "sectionCaption": "Dataset settings"
    },
    "metadataDatasetFields": {
      "title": "Dataset fields to select from the dataset and store as metadata in the database",
      "type": "object",
      "description": "A list of dataset fields which should be selected from the dataset and stored as metadata in the vector stores.\n\nFor example, when using the Website Content Crawler, you might want to store `url` in metadata. In this case, use `metadataDatasetFields parameter as follows {\"url\": \"url\"}`",
      "editor": "json"
    },
    "metadataObject": {
      "title": "Custom object to be stored as metadata in the vector store database",
      "type": "object",
      "description": "This object allows you to store custom metadata for every item in the vector store.\n\nFor example, if you want to store the `domain` as metadata, use the `metadataObject` like this: {\"domain\": \"apify.com\"}.",
      "editor": "json"
    },
    "datasetId": {
      "title": "Dataset ID",
      "type": "string",
      "description": "Dataset ID (when running standalone without integration)",
      "editor": "dataset"
    },
    "enableDeltaUpdates": {
      "title": "Enable incremental updates for objects based on deltas",
      "type": "boolean",
      "description": "When set to true, this setting enables incremental updates for objects in the database by comparing the changes (deltas) between the crawled dataset items and the existing objects, uniquely identified by the `datasetKeysToItemId` field.\n\n The integration will only add new objects and update those that have changed, reducing unnecessary updates. The `datasetFields`, `metadataDatasetFields`, and `metadataObject` fields are used to determine the changes.",
      "default": true,
      "sectionCaption": "Data updates settings"
    },
    "deltaUpdatesPrimaryDatasetFields": {
      "title": "Dataset fields to uniquely identify dataset items (only relevant when `enableDeltaUpdates` is enabled)",
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "This array contains fields that are used to uniquely identify dataset items, which helps to handle content changes across different runs.\n\nFor instance, in a web content crawling scenario, the `url` field could serve as a unique identifier for each item.",
      "editor": "stringList",
      "default": [
        "url"
      ],
      "prefill": [
        "url"
      ]
    },
    "deleteExpiredObjects": {
      "title": "Delete expired objects from the database",
      "type": "boolean",
      "description": "When set to true, delete objects from the database that have not been crawled for a specified period.",
      "default": true
    },
    "expiredObjectDeletionPeriodDays": {
      "title": "Delete expired objects from the database after a specified number of days",
      "type": "integer",
      "description": "This setting allows the integration to manage the deletion of objects from the database that have not been crawled for a specified period. It is typically used in subsequent runs after the initial crawl.\n\nWhen the value is greater than 0, the integration checks if objects have been seen within the last X days (determined by the expiration period). If the objects are expired, they are deleted from the database. The specific value for `deletedExpiredObjectsDays` depends on your use case and how frequently you crawl data.\n\nFor example, if you crawl data daily, you can set `deletedExpiredObjectsDays` to 7 days. If you crawl data weekly, you can set `deletedExpiredObjectsDays` to 30 days.",
      "default": 30,
      "minimum": 0,
      "unit": "days",
      "editor": "number"
    },
    "performChunking": {
      "title": "Enable text chunking",
      "description": "When set to true, the text will be divided into smaller chunks based on the settings provided below. Proper chunking helps optimize retrieval and ensures accurate and efficient responses.",
      "default": true,
      "type": "boolean",
      "sectionCaption": "Text chunking settings"
    },
    "chunkSize": {
      "title": "Maximum chunk size",
      "type": "integer",
      "description": "Defines the maximum number of characters in each text chunk. Choosing the right size balances between detailed context and system performance. Optimal sizes ensure high relevancy and minimal response time.",
      "default": 2000,
      "minimum": 1
    },
    "chunkOverlap": {
      "title": "Chunk overlap",
      "type": "integer",
      "description": "Specifies the number of overlapping characters between consecutive text chunks. Adjusting this helps maintain context across chunks, which is crucial for accuracy in retrieval-augmented generation systems.",
      "default": 0,
      "minimum": 0
    }
  },
  "required": [
    "qdrantUrl",
    "qdrantCollectionName",
    "embeddingsProvider",
    "embeddingsApiKey",
    "datasetFields"
  ]
}