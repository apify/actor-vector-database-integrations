[tool.poetry]
# These fields are not used by Apify, fill configs in .actor/ instead
authors = ["jiri.spilka@apify.com"]
description = ""
name = "store-vector-db"
readme = "README.md"
version = "0.0.1"
package-mode = false

[tool.poetry.dependencies]
apify = "^1.7.0"
apify-client = "^1.6.4"
openai = "^1.17.0"
python = ">=3.11,<3.12"
python-dotenv = "^1.0.1"
langchain-openai = "^0.1.6"
langchain-cohere = "^0.1.4"
langchain-community = "^0.2.0"
langchain-core = "^0.2.1"

[tool.poetry.group.dev.dependencies]
datamodel-code-generator = "^0.25.5"
ipython = "^8.23.0"
mypy = "^1.9.0"
pandas = "^2.2.2"
pre-commit = "^3.7.0"
pytest = "^8.2.0"
pytest-asyncio = "^0.23.6"
pytest-integration-mark = "^0.2.0"
pytest-vcr = "^1.0.2"
ruff = "^0.3.5"

[tool.poetry.group.pinecone]
optional = true

[tool.poetry.group.pinecone.dependencies]
langchain-pinecone = "^0.1.0"

[tool.poetry.group.chroma]
optional = true

[tool.poetry.group.chroma.dependencies]
langchain-chroma = "^0.1.0"
chromadb = "^0.5.0"

[tool.ruff]
line-length = 150
exclude = ["src/models/**"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN101",  # Missing type annotation for `{name}` in method
    "ANN102",  # Missing type annotation for `{name}` in classmethod
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in {filename}
    "BLE001",  # Do not catch blind exception
    "C901",    # `{name}` is too complex
    "COM812",  # This rule may cause conflicts when used with the formatter
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D107",    # Missing docstring in `__init__`
    "EM",      # flake8-errmsg
    "G004",    # Logging statement uses f-string
    "ISC001",  # This rule may cause conflicts when used with the formatter
    "FIX",     # flake8-fixme
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PLR0911", # Too many return statements
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PTH",     # flake8-use-pathlib
    "PYI034",  # `__aenter__` methods in classes like `{name}` usually return `self` at runtime
    "PYI036",  # The second argument in `__aexit__` should be annotated with `object` or `BaseException | None`
    "S102",    # Use of `exec` detected
    "S105",    # Possible hardcoded password assigned to
    "S106",    # Possible hardcoded password assigned to argument: "{name}"
    "S301",    # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    "S303",    # Use of insecure MD2, MD4, MD5, or SHA1 hash function
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "TD002",   # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...
    "TRY003",  # Avoid specifying long messages outside the exception class
    #
    "D",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = [
    "F401", # Unused imports
]
"**/{scripts}/*" = [
    "D",       # Everything from the pydocstyle
    "INP001",  # File {filename} is part of an implicit namespace package, add an __init__.py
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "T20",     # flake8-print
]
"**/{tests}/*" = [
    "D",       # Everything from the pydocstyle
    "INP001",  # File {filename} is part of an implicit namespace package, add an __init__.py
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "S101",    # Use of assert detected
    "SLF001",  # Private member accessed: `{name}`
    "T20",     # flake8-print
    "TRY301",  # Abstract `raise` to an inner function
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"

#[tool.ruff.lint.isort]
#known-first-party = ["apify"]

[tool.pytest.ini_options]
addopts = "-ra"
asyncio_mode = "auto"
timeout = 1200

[tool.mypy]
python_version = "3.11"
files = ["scripts", "src", "tests"]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true

[tool.mypy-scrapy]
ignore_missing_imports = true

[tool.mypy-sortedcollections]
ignore_missing_imports = true
